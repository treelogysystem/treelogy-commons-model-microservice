pipeline{
    agent any
    environment {
        IMAGE = readMavenPom().getArtifactId()
        VERSION = readMavenPom().getVersion()
        BRANCH_NAME = "${GIT_BRANCH}"
        BRANCH_INTEGRATION = 'development' // Configure
        REPOSITORY_SCM = 'https://github.com/treelogysystem/treelogy-commons-model-microservice' // Configure
    }
    stages{
        stage ('Build Backend'){
            steps{
                sh 'echo Build do Backend'
                sh 'mvn clean install -DskipTests'
            }
        }
        stage ('Unit Tests'){
            steps{
                sh 'echo Unit Tests'
                sh 'mvn test'
            }
        }
        stage ('Sonar Analysis'){
            environment{
                scannerHome = tool 'SONAR_SCANNER'
            }
            steps{
                bat 'echo Sonar Analysis'
                withSonarQubeEnv ('TREELOGY-SONAR'){
                    bat "${scannerHome}/bin/sonar-scanner -e -Dsonar.projectKey=treelogy-commons -Dsonar.host.url=http://sonarqube.rancher.treelogy.eco.br -Dsonar.login=sqa_5f098e2d3c93161e962141187155b470c9d5bfb9 -Dsonar.java.binaries=target -Dsonar.coverage.exclusions=**/.mvn/**,**/src/test/**"
                }
            }
        }
        stage ('Quality Gate'){
            steps{
                sleep(50)
                timeout(time: 1, unit: 'MINUTES'){
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('Docker Build Image') {
              steps {
                  script {
                      dockerapp = docker.build("cezarfelps/treelogy-model-microservice:${env.BUILD_ID}",
                        "--build-arg artifactId=${IMAGE} --build-arg version=${VERSION} -f ./deploy/Dockerfile .")
                  }
              }
          }
      stage('Docker Push Image') {
          steps {
              script {
                      docker.withRegistry('https://registry.hub.docker.com', 'treelogy-docker-hub') {
                      dockerapp.push('latest')
                      dockerapp.push("${env.BUILD_ID}")
                  }
              }
          }
      }
        stage('Merge Branch') {
            steps {
                withCredentials([
                    gitUsernamePassword(credentialsId: 'treelogy-github', gitToolName: 'Default')
                ]) {
                    sh "git fetch origin"
                    sh "git checkout ${BRANCH_INTEGRATION}"
                    sh "git pull"
                    sh "git merge origin/${BRANCH_NAME}"
                    sh "git push"
                }
            }
        }
    }
    post{
            success{
                setBuildStatus("Build succeeded", "SUCCESS");
            }
            failure {
                setBuildStatus("Build failed", "FAILURE");
            }
        }
    }
    void setBuildStatus(String message, String state) {
        step([
            $class: "GitHubCommitStatusSetter",
            reposSource: [$class: "ManuallyEnteredRepositorySource", url: "${REPOSITORY_SCM}"],
            contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/build-status"],
            errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
            statusResultSource: [$class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]]]
        ]);
}

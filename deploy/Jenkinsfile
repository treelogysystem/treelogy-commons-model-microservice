pipeline{
    agent any
    environment {
        IMAGE = readMavenPom().getArtifactId()
        VERSION = readMavenPom().getVersion()
        BRANCH_NAME = "${GIT_BRANCH}"
        BRANCH_INTEGRATION = 'development' // Configure
        REPOSITORY_SCM = 'https://github.com/treelogysystem/treelogy-commons-model-microservice' // Configure
    }
    stages{
        stage ('Build Backend'){
            steps{
                sh 'echo Build do Backend'
                sh 'mvn clean install -DskipTests'
            }
        }
        stage ('Unit Tests'){
            steps{
                sh 'echo Unit Tests'
                sh 'mvn test'
            }
        }
        stage('SonarQube analysis') {
            steps{
                  sh 'echo Sonar Analysis'
                  withSonarQubeEnv('TREELOGY-SONAR') {
                    sh "mvn clean verify sonar:sonar -Dsonar.projectKey=treelogy-commons-model-microservice"
                  }
            }
        }
        stage ('Quality Gate'){
            steps{
                sh 'echo Quality Gate'
                sleep(50)
                timeout(time: 1, unit: 'MINUTES'){
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('Docker Build Image') {
              steps {
                  script {
                      dockerapp = docker.build("cezarfelps/treelogy-model-microservice:${env.BUILD_ID}",
                        "--build-arg artifactId=${IMAGE} --build-arg version=${VERSION} -f ./deploy/Dockerfile .")
                  }
              }
          }
      stage('Docker Push Image') {
          steps {
              script {
                      docker.withRegistry('https://registry.hub.docker.com', 'treelogy-docker-hub') {
                      dockerapp.push('latest')
                      dockerapp.push("${env.BUILD_ID}")
                  }
              }
          }
      }
        stage('Merge Branch') {
            steps {
                withCredentials([
                    gitUsernamePassword(credentialsId: 'treelogy-github', gitToolName: 'Default')
                ]) {
                    sh "git fetch origin"
                    sh "git checkout ${BRANCH_INTEGRATION}"
                    sh "git pull"
                    sh "git merge origin/${BRANCH_NAME}"
                    sh "git push"
                }
            }
        }
    }
}
